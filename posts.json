[
  {
    "id": "welcome_post_1700000000000",
    "title": "欢迎来到期望ai的博客！",
    "content": "# 欢迎！\n\n这是您的第一篇文章，由期望ai自动生成。\n\n使用后台管理系统，您可以轻松发布、编辑和删除文章。文章支持 **Markdown** 格式。\n\n在 [博客管理后台](admin.html) 中，您可以：\n\n*   撰写新的文章\n*   管理网站配置 (标题、描述、颜色、背景图)\n*   配置 Gitalk 评论系统\n\n快去发布你的第一篇文章吧！\n\n<!--more-->\n\n### Markdown 示例\n\n```javascript\nconsole.log('Hello, world!');\n```\n\n> 引用块。\n\n*   列表项1\n*   列表项2\n\n--- \n\n<p style=\"text-align: center;\">祝你创作愉快！</p>",
    "category": "公告",
    "tags": ["欢迎", "教程", "入门"],
    "createdAt": "2023-11-15T10:00:00.000Z",
    "updatedAt": "2023-11-15T10:00:00.000Z"
  },
  {
    "id": "my_first_tech_post_1700000000001",
    "title": "深入理解JavaScript中的闭包",
    "content": "# 深入理解JavaScript中的闭包\n\n闭包（Closure）是JavaScript中一个非常重要且强大的概念。它允许函数访问和操作函数外部的变量，即使外部函数已经执行完毕。\n\n## 什么是闭包？\n\n简单来说，当一个函数能够记住并访问其“词法作用域”中的变量时，即使该函数在其词法作用域之外执行，它也形成了一个闭包。\n\n<!--more-->\n\n## 闭包的工作原理\n\n考虑以下代码示例：\n\n```javascript\nfunction makeAdder(x) {\n  return function(y) {\n    return x + y;\n  };\n}\n\nconst add5 = makeAdder(5);\nconsole.log(add5(2)); // 输出 7\nconsole.log(add5(10)); // 输出 15\n```\n\n在这个例子中，`makeAdder` 函数返回了一个匿名函数。即使 `makeAdder` 已经执行完毕并从调用栈中移除，`add5` 仍然能够访问其外部作用域中的 `x` 变量。这就是闭包。\n\n---",
    "category": "编程",
    "tags": ["JavaScript", "闭包", "前端", "技术"],
    "createdAt": "2023-11-16T12:30:00.000Z",
    "updatedAt": "2023-11-16T12:30:00.000Z"
  }
]
